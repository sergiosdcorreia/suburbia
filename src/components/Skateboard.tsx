/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useMemo } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type SkateboardProps = {

}

type GLTFResult = GLTF & {
  nodes: {
    GripTape: THREE.Mesh
    Wheel1: THREE.Mesh
    Wheel2: THREE.Mesh
    Deck: THREE.Mesh
    Wheel4: THREE.Mesh
    Bolts: THREE.Mesh
    Wheel3: THREE.Mesh
    Baseplates: THREE.Mesh
    Truck1: THREE.Mesh
    Truck2: THREE.Mesh
  }
}

export function Skateboard(props: SkateboardProps) {
  const { nodes } = useGLTF('/skateboard.gltf') as GLTFResult

  const gripTapeDiffuse = useTexture("/skateboard/griptape-diffuse.webp")
  const gripTapeRoughness = useTexture("/skateboard/griptape-roughness.webp")
  
  const gripTapeMaterial = useMemo(() => {
    const material = new THREE.MeshStandardMaterial({
      map: gripTapeDiffuse,
      bumpMap: gripTapeRoughness,
      roughnessMap: gripTapeRoughness,
      bumpScale: 3.5,
      roughness: 0.8,
      color: "#555555"
    })

    if (gripTapeDiffuse) {
      gripTapeDiffuse.wrapS = THREE.RepeatWrapping
      gripTapeDiffuse.wrapT = THREE.RepeatWrapping
      gripTapeDiffuse.repeat.set(9, 9)
      gripTapeDiffuse.needsUpdate = true
    }

    if (gripTapeRoughness) {
      gripTapeRoughness.wrapS = THREE.RepeatWrapping
      gripTapeRoughness.wrapT = THREE.RepeatWrapping
      gripTapeRoughness.repeat.set(9, 9)
      gripTapeRoughness.needsUpdate = true
      gripTapeRoughness.anisotropy = 8
    }

    return material
  }, [gripTapeDiffuse, gripTapeRoughness])

  const boltColor = "#555555"

  const boltMaterial = useMemo(() => new THREE.MeshStandardMaterial({
    color: boltColor,
    metalness: .5,
    roughness: .3
  }),[boltColor])

  const metalNormal = useTexture("/skateboard/metal-normal.avif")
  metalNormal.wrapS = THREE.RepeatWrapping
  metalNormal.wrapT = THREE.RepeatWrapping
  metalNormal.anisotropy = 8
  metalNormal.repeat.set(8, 8)

  const truckColor = "#555555"

  const truckMaterial = useMemo(() => new THREE.MeshStandardMaterial({
    color: truckColor,
    normalMap: metalNormal,
    normalScale: new THREE.Vector2( .3, .3 ),
    metalness: .8,
    roughness: .25
  }),[truckColor])

  const deckTexture = useTexture("/skateboard/Deck.webp")
  deckTexture.flipY = false

  const deckMaterial = useMemo(() => new THREE.MeshStandardMaterial({
    map: deckTexture,
    roughness: .1
  }),[deckTexture])

  const wheelTexture = useTexture("/skateboard/SkateWheel1.png")
  wheelTexture.flipY = false

  const wheelMaterial = useMemo(() => new THREE.MeshStandardMaterial({
    map: wheelTexture,
    roughness: .1
  }),[wheelTexture])

  return (
    <group {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="GripTape"
          castShadow
          receiveShadow
          geometry={nodes.GripTape.geometry}
          material={gripTapeMaterial}
          position={[0, 0.286, -0.002]}
        />
        <mesh
          name="Wheel1"
          castShadow
          receiveShadow
          geometry={nodes.Wheel1.geometry}
          material={wheelMaterial}
          position={[0.238, 0.086, 0.635]}
        />
        <mesh
          name="Wheel2"
          castShadow
          receiveShadow
          geometry={nodes.Wheel2.geometry}
          material={wheelMaterial}
          position={[-0.237, 0.086, 0.635]}
        />
        <mesh
          name="Deck"
          castShadow
          receiveShadow
          geometry={nodes.Deck.geometry}
          material={deckMaterial}
          position={[0, 0.271, -0.002]}
        />
        <mesh
          name="Wheel4"
          castShadow
          receiveShadow
          geometry={nodes.Wheel4.geometry}
          material={wheelMaterial}
          position={[-0.238, 0.086, -0.635]}
          rotation={[Math.PI, 0, Math.PI]}
        />
        <mesh
          name="Bolts"
          castShadow
          receiveShadow
          geometry={nodes.Bolts.geometry}
          material={boltMaterial}
          position={[0, 0.198, 0]}
          rotation={[Math.PI, 0, Math.PI]}
        />
        <mesh
          name="Wheel3"
          castShadow
          receiveShadow
          geometry={nodes.Wheel3.geometry}
          material={wheelMaterial}
          position={[0.237, 0.086, -0.635]}
          rotation={[Math.PI, 0, Math.PI]}
        />
        <mesh
          name="Baseplates"
          castShadow
          receiveShadow
          geometry={nodes.Baseplates.geometry}
          material={truckMaterial}
          position={[0, 0.211, 0]}
        />
        <mesh
          name="Truck1"
          castShadow
          receiveShadow
          geometry={nodes.Truck1.geometry}
          material={truckMaterial}
          position={[0, 0.101, -0.617]}
        />
        <mesh
          name="Truck2"
          castShadow
          receiveShadow
          geometry={nodes.Truck2.geometry}
          material={truckMaterial}
          position={[0, 0.101, 0.617]}
          rotation={[Math.PI, 0, Math.PI]}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/skateboard.gltf')
